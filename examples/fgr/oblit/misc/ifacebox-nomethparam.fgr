package main;
type HasRep interface { getRep() Rep };
type Any interface { HasRep };
type Func interface { HasRep; apply(a HasRep) HasRep };
type Box interface { HasRep; Make() HasRep };
type ABox struct { A Rep };
func (x0 ABox) getRep() Rep { return ABox[[x0.A]] };
func (a ABox) Make() HasRep { return ABox{a.A} };
type BBox struct { A Rep };
func (x0 BBox) getRep() Rep { return BBox[[x0.A]] };
func (a BBox) Make() HasRep { return BBox{a.A} };
type E struct { val D };
func (x0 E) getRep() Rep { return E[[]] };
type D struct { val E };
func (x0 D) getRep() Rep { return D[[]] };
type Dummy struct { };
func (x0 Dummy) getRep() Rep { return Dummy[[]] };
func (x Dummy) doSomething(y HasRep) HasRep { return y.(Box).Make().(Box) };
func (x Dummy) makeBox(A Rep) HasRep { return ABox{A} };
func main() { _ = Dummy{}.doSomething(Dummy{}.makeBox(E[[]]).(Box)).(Box) }