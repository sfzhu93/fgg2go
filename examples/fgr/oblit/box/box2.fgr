package main;
type HasRep interface { getRep() Rep };
type Any interface { HasRep };
type Box struct { a Rep; f Any };
func (x0 Box) getRep() Rep { return Box[[x0.a]] };
type D struct { };
func (x0 D) getRep() Rep { return D[[]] };
func (x0 D) bad(a Rep, x1 HasRep) HasRep { return D{}.bad(a, x1.(Any)).(Any) };
type A struct { };
func (x0 A) getRep() Rep { return A[[]] };
func main() { _ = D{}.bad(A[[]], A{}).(Any) }