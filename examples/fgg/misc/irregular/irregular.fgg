//$ go run github.com/rhu1/fgg -fgg -eval=-1 -v fgg/examples/misc/irregular/irregular.fgg
// or
//$ go run github.com/rhu1/fgg -fgg -eval=-1 -compile=tmp/fg/irregular/irregular.go -v fgg/examples/misc/irregular/irregular.fgg
//$ go run github.com/rhu1/fgg -eval=-1 -v tmp/fg/irregular/irregular.go

package main;

import "fmt";

/* Base decls: Any, Booleans, Nautrals, Functions -- cut down versions */

type Any(type ) interface {};

/* Booleans */

type Bool(type ) interface {
	Not(type )() Bool()
};
type TT(type ) struct {};
type FF(type ) struct {};
func (this TT(type )) Not(type )() Bool() { return FF(){} };
func (this FF(type )) Not(type )() Bool() { return TT(){} };

/* Naturals */

type Nat(type ) interface {
	Add(type )(n Nat()) Nat()
};
type Zero(type ) struct {};
type Succ(type ) struct { pred Nat() };
func (m Zero(type )) Add(type )(n Nat()) Nat() { return n };
func (m Succ(type )) Add(type )(n Nat()) Nat() { return Succ(){m.pred.Add()(n)} };

/* Functions */

type Func(type a Any(), b Any()) interface {
	Apply(type )(x a) b
};
type incr(type ) struct {
	n Nat()
};
func (this incr(type )) Apply(type )(x Nat()) Nat() { return x.Add()(this.n) };
type not(type ) struct {};
func (this not(type )) Apply(type )(x Bool()) Bool() { return x.Not()() };

/* Balanced map using Pairs -- irregular (polymorphic recursion) */

type Pair(type a Any()) struct {
	fst a;
	snd a
};
type pairMap(type a Any()) struct {
	f Func(a, a)
};
func (p pairMap(type a Any())) Apply(type )(x Pair(a)) Pair(a) {  // Func(Pair(a),Pair(a))
	return Pair(a){ p.f.Apply()(x.fst), p.f.Apply()(x.snd) }
};
type Balanced(type a Any()) interface {
	BalancedMap(type )(f Func(a, a)) Balanced(a)
};
type Leaf(type a Any()) struct {};
type Node(type a Any()) struct {
	label a;
	children Balanced(Pair(a))
};
func (leaf Leaf(type a Any())) BalancedMap(type )(f Func(a, a)) Balanced(a) {
	return Leaf(a){}
};
func (node Node(type a Any())) BalancedMap(type )(f Func(a, a)) Balanced(a) {
	return Node(a){f.Apply()(node.label), node.children.BalancedMap()(pairMap(a){f})}
};

/* Example */

type D(type ) struct {};
func (d D(type )) _0(type )() Nat() { return Zero(){} };
func (d D(type )) _1(type )() Nat() { return Succ(){D(){}._0()()} };
func (d D(type )) _2(type )() Nat() { return Succ(){D(){}._1()()} };
func (d D(type )) _3(type )() Nat() { return Succ(){D(){}._2()()} };
func (d D(type )) _4(type )() Nat() { return Succ(){D(){}._3()()} };
func (d D(type )) _5(type )() Nat() { return Succ(){D(){}._4()()} };
func (d D(type )) _6(type )() Nat() { return Succ(){D(){}._5()()} };
func (d D(type )) _7(type )() Nat() { return Succ(){D(){}._6()()} };

func main() { 
	//_ =
	fmt.Printf("%#v",
		Node(Nat()){
				D(){}._1()(),
				Node(Pair(Nat())){
					Pair(Nat()){D(){}._2()(), D(){}._3()()},
					Node(Pair(Pair(Nat()))){
						Pair(Pair(Nat())){
							Pair(Nat()){D(){}._4()(), D(){}._5()()}, 
							Pair(Nat()){D(){}._6()(), D(){}._7()()}
						},
						Leaf(Pair(Pair(Pair(Nat())))){}
					}
				}
			}.BalancedMap()(incr(){D(){}._1()()})
	)
}

/*func main() {   // TODO: add test (monom)
	_ = Node(Nat()){
				D(){}._1()(),
				Leaf(Pair(Nat())){}
			}.BalancedMap()(incr(){D(){}._1()()})
}*/
