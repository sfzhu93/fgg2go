//$ go run github.com/rhu1/fgg -fgg -eval=-1 -monom -v fgg/examples/misc/monomorph/monomorph.fgg
// or
//$ go run github.com/rhu1/fgg -fgg -eval=-1 -compile=tmp/fg/monomorph/monomorph.go -v fgg/examples/misc/monomorph/monomorph.fgg
//$ go run github.com/rhu1/fgg -eval=-1 -v tmp/fg/monomorph/monomoprh.go

package main;

import "fmt";

/* Base decls: Any, Booleans, Nautrals, Functions -- cut down versions */

type Any(type ) interface {};

/* Booleans */

type Bool(type ) interface {
	Not(type )() Bool()
};
type TT(type ) struct {};
type FF(type ) struct {};
func (this TT(type )) Not(type )() Bool() { return FF(){} };
func (this FF(type )) Not(type )() Bool() { return TT(){} };

/* Naturals */

type Nat(type ) interface {
	Add(type )(n Nat()) Nat()
};
type Zero(type ) struct {};
type Succ(type ) struct { pred Nat() };
func (m Zero(type )) Add(type )(n Nat()) Nat() { return n };
func (m Succ(type )) Add(type )(n Nat()) Nat() { return Succ(){m.pred.Add()(n)} };

/* Functions */

type Func(type a Any(), b Any()) interface { Apply(type )(x a) b };

type incr(type ) struct { n Nat() };
func (this incr(type )) Apply(type )(x Nat()) Nat() { return x.Add()(this.n) };

type not(type ) struct {};
func (this not(type )) Apply(type )(x Bool()) Bool() { return x.Not()() };

/* Lists */

type List(type a Any()) interface {
	Map(type b Any())(f Func(a,b)) List(b)
};
type Nil(type a Any()) struct {};
type Cons(type a Any()) struct { head a; tail List(a) };

func (xs Nil(type a Any())) Map(type b Any())(f Func(a,b)) List(b) { 
	return Nil(b){} 
};
func (xs Cons(type a Any())) Map(type b Any())(f Func(a,b)) List(b) {
	return Cons(b){f.Apply()(xs.head), xs.tail.Map(b)(f)}
};

/* Example code */

type Pair(type a Any(), b Any()) struct { Fst a; Snd b };

type D(type ) struct {};
func (d D(type )) _1(type )() Nat() { return Succ(){Zero(){}} };
func (d D(type )) _2(type )() Nat() { return Succ(){D(){}._1()()} };
func (d D(type )) _3(type )() Nat() { return Succ(){D(){}._2()()} };

func main() {
	//_ =
	fmt.Printf("%#v",
		Pair(List(Bool()), List(Nat())){
			Cons(Bool()){TT(){}, Cons(Bool()){FF(){}, Nil(Bool()){}}}
					.Map(Bool())(not(){}),
			Cons(Nat()){D(){}._1()(), Cons(Nat()){D(){}._2()(), Cons(Nat()){D(){}._3()(), Nil(Nat()){}}}}
					.Map(Nat())(incr(){D(){}._1()()})
		}
	)
}
