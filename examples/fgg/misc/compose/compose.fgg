//$ go run github.com/rhu1/fgg -fgg -eval=-1 -v fgg/examples/misc/compose/compose.fgg

package main;

import "fmt";

/* Base decls: Any, Booleans, Nautrals, Functions, Lists */

type Any(type ) interface {};
type ToAny(type ) struct { any Any() };

/* Booleans */

type Eq(type a Any()) interface { Equal(type )(that a) Bool() };
type Bool(type ) interface {
	Not(type )() Bool();
	Equal(type )(that Bool()) Bool();
	Cond(type a Any())(br Branches(a)) a
};
type Branches(type a Any()) interface {
	IfTT(type )() a;
	IfFF(type )() a
};
type TT(type ) struct {};
type FF(type ) struct {};
func (this TT(type )) Not(type )() Bool() { return FF(){} };
func (this FF(type )) Not(type )() Bool() { return TT(){} };
func (this TT(type )) Equal(type )(that Bool()) Bool() { return that };
func (this FF(type )) Equal(type )(that Bool()) Bool() { return that.Not()() };
func (this TT(type )) Cond(type a Any())(br Branches(a)) a { return br.IfTT()() };
func (this FF(type )) Cond(type a Any())(br Branches(a)) a { return br.IfFF()() };

/* Naturals */

type Nat(type ) interface {
	Add(type )(n Nat()) Nat();
	Equal(type )(n Nat()) Bool();
	equalZero(type )() Bool();
	equalSucc(type )(m Nat()) Bool()
};
type Zero(type ) struct {};
type Succ(type ) struct { pred Nat() };
func (m Zero(type )) Add(type )(n Nat()) Nat() { return n };
func (m Succ(type )) Add(type )(n Nat()) Nat() { return Succ(){m.pred.Add()(n)} };
func (m Zero(type )) Equal(type )(n Nat()) Bool() { return n.equalZero()() };
func (m Succ(type )) Equal(type )(n Nat()) Bool() { return n.equalSucc()(m.pred) };
func (n Zero(type )) equalZero(type )() Bool() { return TT(){} };
func (n Succ(type )) equalZero(type )() Bool() { return FF(){} };
func (n Zero(type )) equalSucc(type )(m Nat()) Bool() { return FF(){} };
func (n Succ(type )) equalSucc(type )(m Nat()) Bool() { return m.Equal()(n.pred) };

/* Functions */

type Func(type a Any(), b Any()) interface {
	Apply(type )(x a) b
};
type incr(type ) struct {
	n Nat()
};
func (this incr(type )) Apply(type )(x Nat()) Nat() { return x.Add()(this.n) };
type not(type ) struct {};
func (this not(type )) Apply(type )(x Bool()) Bool() { return x.Not()() };
type compose(type a Any(), b Any(), c Any()) struct {
	f Func(a, b);
	g Func(b, c)
};
func (this compose(type a Any(), b Any(), c Any())) Apply(type )(x a) c {
	return this.g.Apply()(this.f.Apply()(x))
};

/* Lists */

type List(type a Eq(a)) interface {
	Map(type b Eq(b))(f Func(a, b)) List(b);
	Member(type )(x a) Bool()
};
type Nil(type a Eq(a)) struct {};
type Cons(type a Eq(a)) struct {
	head a;
	tail List(a)
};
func (xs Nil(type a Eq(a))) Map(type b Eq(b))(f Func(a, b)) List(b) {
	return Nil(b){}
};
func (xs Cons(type a Eq(a))) Map(type b Eq(b))(f Func(a, b)) List(b) {
	return Cons(b){f.Apply()(xs.head), xs.tail.Map(b)(f)}
};
//type memberBr(type b Eq(b)) struct {  // FIXME: alpha
type memberBr(type a Eq(a)) struct {
	xs List(a);
	x a
};
func (this memberBr(type a Eq(a))) IfTT(type )() Bool() { return TT(){} };
func (this memberBr(type a Eq(a))) IfFF(type )() Bool() { return this.xs.Member()(this.x) };
func (xs Nil(type a Eq(a))) Member(type )(x a) Bool() { return FF(){} };
func (xs Cons(type a Eq(a))) Member(type )(x a) Bool() { return x.Equal()(xs.head).Cond(Bool())(memberBr(a){xs, x}) };

/* Example code */

type D(type ) struct {};
func (d D(type )) _1(type )() Nat() { return Succ(){Zero(){}} };
func (d D(type )) _2(type )() Nat() { return D(){}._1()().Add()(D(){}._1()()) };
func (d D(type )) _3(type )() Nat() { return D(){}._2()().Add()(D(){}._1()()) };

func main() {
	//_ = 
	fmt.Printf("%#v",
	compose(Nat(), Nat(), Nat()){incr(){D(){}._1()()}, incr(){D(){}._2()()}}.
				Apply()(D(){}._3()()) // Main example (assertion unnecessary)
				.Add()(Zero(){}) // Extra
	)
}
