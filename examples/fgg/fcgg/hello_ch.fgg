package main;
type Int[type ] struct {};

type eventObserver[type ] struct {
   ch chan Int[]
};

type Dummy[type ] struct {};

type eventObserverI[type ] interface {
   Match[type ]() Dummy[];
   CheckEventError[type ]() Dummy[]
};

func (e eventObserver[type ]) Match[type ]() Dummy[] {
   close(e.ch);
   return Dummy[]{}
};

func (e eventObserver[type ]) CheckEventError[type ]() Dummy[] {
   close(e.ch);
   return Dummy[]{}
};

func (this Dummy[type ]) DoubleClose[type ](e eventObserverI[]) Dummy[] {
   stmt0 := e.Match[]();
   stmt1 := e.CheckEventError[]();
   return Dummy[]{}
};

func (this Dummy[type ]) MyGoroutine[type ](e eventObserver[]) Dummy[] {
      e.ch <- Int[]{};
	  return this
};

func (this Dummy[type ]) SendAfterClose[type ](eI eventObserverI[]) Dummy[] {
   e := eI.(eventObserver[]);
   go this.MyGoroutine[](e);
   stmt3 := e.CheckEventError[]();
   return Dummy[]{}
};

func main() {
   _ = Dummy[]{}.DoubleClose[](eventObserver[]{make(chan Int[])})
//   Dummy{}.SendAfterClose(e)
}