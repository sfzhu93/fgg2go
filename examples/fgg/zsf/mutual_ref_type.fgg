package main;
type Any[type ] interface {};

type Int[type ] struct {};
func (this Int[type ]) First[type ](that Int[type ]) Int[type ] {
return this
};

type Foo[type a Foo[a, b], b Bar[a, b]] interface {//
FooFunc[type ] (that b) a;
Inner[type ] () Int[]
};

type Bar[type a Foo[a, b], b Bar[a, b]] interface {
BarFunc[type ] (that a) b;
Inner[type ] () Int[]
};

type FooImpl[type ] struct {
inner Int[type ]
};

type BarImpl[type ] struct {
inner Int[type ]
};

func (this FooImpl[type ]) Inner[type ] () Int[] {
return this.inner
};

func (this FooImpl[type ]) FooFunc[type ] (that BarImpl[type ]) FooImpl[type ] {
return FooImpl[]{this.Inner[]().First[](that.Inner[]())}
};

func (this BarImpl[type ]) Inner[type ] () Int[] {
return this.inner
};

func (this BarImpl[type ]) BarFunc[type ] (that FooImpl[type ]) BarImpl[type ] {
return BarImpl[]{this.Inner[]().First[](that.Inner[]())}
};

func main() {
_ = FooImpl[]{Int[]{}}.FooFunc[](
        BarImpl[]{Int[]{}}.BarFunc[](
            FooImpl[]{Int[]{}}
        )
    )
}