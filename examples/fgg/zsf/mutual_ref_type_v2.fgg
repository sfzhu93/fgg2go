package main;

type Any[type ] interface {};

type Foo [type a Foo[a]] interface {//
FooFunc[type b Bar[b]] (that b) a
};

type Bar [type b Bar[b]] interface {
BarFunc[type a Foo[a]] (that a) b
};

type FooImpl[type ] struct {
};

type BarImpl[type ] struct {

};

func (this FooImpl[type ]) FooFunc[type b Bar[b]] (that b) FooImpl[type ] {
return this
};

func (this BarImpl[type ]) BarFunc[type a Foo[a]] (that a) BarImpl[type ] {
return this
};

func main() {
_ = FooImpl[]{}.FooFunc[BarImpl[]](
        BarImpl[]{}//.BarFunc[](
        //    FooImpl[]{}
        //)
    )
}