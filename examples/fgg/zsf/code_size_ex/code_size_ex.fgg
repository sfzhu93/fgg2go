package main;

type Any[type ] interface {

};

type Ret[type ] struct {

};

type T1[type ] struct {

};

type T2[type ] struct {

};

type T3[type ] struct {

};

type DummyStruct[type ] struct {

};

func (this DummyStruct[type ]) semicolon[type a Any[], b Any[]](p1 a, p2 b) Ret[] {
return Ret[]{}
};

func (this DummyStruct[type ]) f[type a Any[]](p a) Ret[] {
return this.semicolon[Ret[], Ret[]](
    this.g[T1[], a](T1[]{}, p), this.semicolon[Ret[], Ret[]](
    this.g[T2[], a](T2[]{}, p), 
    this.g[T3[], a](T3[]{}, p)))
};

func (this DummyStruct[type ]) g[type a Any[], b Any[]](p1 a, p2 b) Ret[] {
return Ret[]{}
};

func main() {
    _ = DummyStruct[]{}.semicolon[Ret[], Ret[]](DummyStruct[]{}.f[T1[]](T1[]{}), DummyStruct[]{}.f[T2[]](T2[]{}))
}