package main;
type TimesTwoFactory·ê∏·ê≥ struct {};
type Int·ê∏·ê≥ struct {};


func (this Int·ê∏·ê≥) Plus·ê∏·ê≥(that Int·ê∏·ê≥) Int·ê∏·ê≥ { return that };
func (this Int·ê∏·ê≥) Plus___Int___Int__() Top { return this };
func (this TimesTwoFactory·ê∏·ê≥) TimesTwo·ê∏Int·ê∏·ê≥·ê≥(x Int·ê∏·ê≥) Int·ê∏·ê≥ { return x.Plus·ê∏·ê≥(x) };
func (this TimesTwoFactory·ê∏·ê≥) TimesTwo__Œ≤1_Num_Œ≤1___Œ≤1_Œ≤1() Top { return this };


type Top interface {};

type PlusFuncType func(this Top, that Top) Top;
type NumDict struct {
	dict map[string]PlusFuncType
};

//The wrapper is necessary in Rust. But in Go, it seems only a way to fit into a dictionary.
func NumIntPlusWrapper(this Top, that Top) Top {
	_this := this.(Int·ê∏·ê≥);
	_that := that.(Int·ê∏·ê≥);
	ret := _this.Plus·ê∏·ê≥(_that);
	return ret//You may wonder why it is not ret.(Top),
	// because in standard go ùëí has to be an interface type in ùëí.(ùúè)
}

//Go doesn't allow const arrays or maps. So we have to have this to somehow represent a dictionary
func getNumDictOfInt() map[string]PlusFuncType {
	return map[string]PlusFuncType{
		"Plus": (*Int·ê∏·ê≥).Plus·ê∏·ê≥,
	}
}

func (this TimesTwoFactory·ê∏·ê≥) TimesTwo_dict_pass(x Top, dict1 NumDict) Top {
	Plus·ê∏·ê≥ := dict1.dict["Plus"];
	return Plus·ê∏·ê≥(x, x)
};

func main() {
	_ = TimesTwoFactory·ê∏·ê≥{}.TimesTwo·ê∏Int·ê∏·ê≥·ê≥(Int·ê∏·ê≥{});
	_NumDictofInt := NumDict{
		dict:getNumDictOfInt(),
	};
	_ = TimesTwoFactory·ê∏·ê≥{}.TimesTwo_dict_pass(Int·ê∏·ê≥{}, _NumDictofInt).(Int·ê∏·ê≥)

}