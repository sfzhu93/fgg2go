package main;

type Any[type ] interface {};

type Int[type ] struct {};
type Bar[type ] interface {
    BarMemberFunc[type ]() Int[]
};

type BarImpl[type ] struct {

};

func (this BarImpl[type ]) BarMemberFunc[type ]() Int[] {
    return Int[]{}
};

type Foo[type b Any[]] interface {
    //id[type a b](in a) a //error: Upper bound must be a named interface type: not Any (type b Any)
    id[type ](in b) b
};

type Baz[type b Any[]] struct {};

func (this Baz[type B Bar[]]) id[type ](in B) B { return in };

type Dummy[type ] struct {};

func (this Dummy[type ]) f[type ](in Foo[Bar[]]) Bar[] {return in.id[](BarImpl[]{}) };

//func (this Dummy[type ]) g[type ]() Bar[] {return BarImpl[]{}};

func main() {
    _ = Dummy[]{}.f[](Baz[Bar[]]{})
}


