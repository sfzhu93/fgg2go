package main;
type Any interface {};
type Colorǂ interface {};
type ColorǂDictǂ struct {};
type Topǂ struct {};
func (thisǂ Topǂ) Opǂ() Any { return Topǂ{};
 };
type Redǂ struct {};
type Blueǂ struct {};
func (thisǂ Topǂ) doǂ(xǂ Any) Any { return thisǂ;
 };
type Baseǂ interface { g_chanǂ() Any; g1ǂ(p1ǂ Any, p2ǂ Any) Any; g2ǂ(p1ǂ Any, p2ǂ Any) Any };
type BaseǂDictǂ struct { g_chanǂ func (receiver Any) Any; g1ǂ func (receiver Any, p1ǂ Any, p2ǂ Any) Any; g2ǂ func (receiver Any, p1ǂ Any, p2ǂ Any) Any };
type Derivedǂ struct { dict_0 ColorǂDictǂ; dict_1 ColorǂDictǂ };
func (thisǂ Derivedǂ) g_chanǂ() Any { return Topǂ{}.Opǂ().(Topǂ).Opǂ();
 };
func (thisǂ Derivedǂ) g1ǂ(p1ǂ Any, p2ǂ Any) Any { return thisǂ;
 };
func (thisǂ Derivedǂ) g2ǂ(p1ǂ Any, p2ǂ Any) Any { return thisǂ;
 };
func (thisǂ Topǂ) f0ǂ(dict_0 ColorǂDictǂ, dict_1 ColorǂDictǂ, dict_2 BaseǂDictǂ, xǂ Any, p1ǂ Any, p2ǂ Any) Any { return thisǂ.doǂ(dict_2.g1ǂ(xǂ, p1ǂ, p2ǂ)).(Topǂ).doǂ(dict_2.g2ǂ(xǂ, p1ǂ, p2ǂ)).(Topǂ).doǂ(dict_2.g_chanǂ(xǂ));
 };
func (thisǂ Topǂ) f4ǂ(dict_0 ColorǂDictǂ, dict_1 ColorǂDictǂ, p1ǂ Any, p2ǂ Any) Any { return thisǂ.f0ǂ(dict_0, dict_1, BaseǂDictǂ{func (receiver Any) Any { return receiver.(Derivedǂ).g_chanǂ() }, func (receiver Any, p1ǂ Any, p2ǂ Any) Any { return receiver.(Derivedǂ).g1ǂ(p1ǂ, p2ǂ) }, func (receiver Any, p1ǂ Any, p2ǂ Any) Any { return receiver.(Derivedǂ).g2ǂ(p1ǂ, p2ǂ) }}, Derivedǂ{dict_0, dict_1}, p1ǂ, p2ǂ);
 };
func (thisǂ Topǂ) f1ǂ(dict_0 ColorǂDictǂ, dict_1 ColorǂDictǂ, p1ǂ Any, p2ǂ Any) Any { return thisǂ.f2ǂ(dict_0, dict_1, p1ǂ, p2ǂ);
 };
func (thisǂ Topǂ) f2ǂ(dict_0 ColorǂDictǂ, dict_1 ColorǂDictǂ, p1ǂ Any, p2ǂ Any) Any { return thisǂ.f3ǂ(dict_0, dict_1, p1ǂ, p2ǂ);
 };
func (thisǂ Topǂ) f3ǂ(dict_0 ColorǂDictǂ, dict_1 ColorǂDictǂ, p1ǂ Any, p2ǂ Any) Any { return thisǂ.f4ǂ(dict_0, dict_1, p1ǂ, p2ǂ);
 };
func main() { _ = Topǂ{}.f1ǂ(ColorǂDictǂ{}, ColorǂDictǂ{}, Redǂ{}, Redǂ{}).(Topǂ).f1ǂ(ColorǂDictǂ{}, ColorǂDictǂ{}, Redǂ{}, Blueǂ{}).(Topǂ).f1ǂ(ColorǂDictǂ{}, ColorǂDictǂ{}, Blueǂ{}, Redǂ{}).(Topǂ).f1ǂ(ColorǂDictǂ{}, ColorǂDictǂ{}, Blueǂ{}, Blueǂ{}) }
