//$ go run github.com/rhu1/fgg -fgg -eval=-1 -v fgg/examples/oopsla20/fig4/functions.fgg

package main;

import "fmt";

/* Library: Bool, Int */

type Bool(type ) interface {
	Not(type )() Bool();
	Equal(type )(that Bool()) Bool();
	Cond(type a Any())(br Branches(a)) a
};
type Branches(type a Any()) interface {
	IfTT(type )() a;
	IfFF(type )() a
};
type TT(type ) struct {};
type FF(type ) struct {};
func (this TT(type )) Not(type )() Bool() { return FF(){} };
func (this FF(type )) Not(type )() Bool() { return TT(){} };
func (this TT(type )) Equal(type )(that Bool()) Bool() { return that };
func (this FF(type )) Equal(type )(that Bool()) Bool() { return that.Not()() };
func (this TT(type )) Cond(type a Any())(br Branches(a)) a { return br.IfTT()() };
func (this FF(type )) Cond(type a Any())(br Branches(a)) a { return br.IfFF()() };

type Int(type ) interface {
	Inc(type )() Int();
	Dec(type )() Int();
	Add(type )(x Int()) Int();
	Gt(type )(x Int()) Bool();
	IsNeg(type )() Bool()
};

type Zero(type ) struct {};
func (x0 Zero(type )) Inc(type )() Int() { return Pos(){x0} };
func (x0 Zero(type )) Dec(type )() Int() { return Neg(){x0} };
func (x0 Zero(type )) Add(type )(x Int()) Int() { return x };
func (x0 Zero(type )) Gt(type )(x Int()) Bool() { return x.IsNeg()() };
func (x0 Zero(type )) IsNeg(type )() Bool() { return FF(){} };

type Pos(type ) struct { dec Int() };
func (x0 Pos(type )) Inc(type )() Int() { return Pos(){x0} };
func (x0 Pos(type )) Dec(type )() Int() { return x0.dec };
func (x0 Pos(type )) Add(type )(x Int()) Int() { return x0.dec.Add()(x.Inc()()) };
func (x0 Pos(type )) Gt(type )(x Int()) Bool() { return x0.dec.Gt()(x.Dec()()) };
func (x0 Pos(type )) IsNeg(type )() Bool() { return FF(){} };

type Neg(type ) struct { inc Int() };
func (x0 Neg(type )) Inc(type )() Int() { return x0.inc };
func (x0 Neg(type )) Dec(type )() Int() { return Neg(){x0} };
func (x0 Neg(type )) Add(type )(x Int()) Int() { return x0.inc.Add()(x.Dec()()) };
func (x0 Neg(type )) Gt(type )(x Int()) Bool() { return x0.inc.Gt()(x.Inc()()) };
func (x0 Neg(type )) IsNeg(type )() Bool() { return TT(){} };

type Ints(type ) struct {};
func (d Ints(type )) _1(type )() Int() { return Pos(){Zero(){}} };
func (d Ints(type )) _2(type )() Int() { return d._1()().Add()(d._1()()) };
func (d Ints(type )) _3(type )() Int() { return d._2()().Add()(d._1()()) };
func (d Ints(type )) __1(type )() Int() { return Neg(){Zero(){}} };
func (d Ints(type )) __2(type )() Int() { return d.__1()().Add()(d.__1()()) };
func (d Ints(type )) __3(type )() Int() { return d.__2()().Add()(d.__1()()) };
func (d Ints(type )) __4(type )() Int() { return d.__3()().Add()(d.__1()()) };
func (d Ints(type )) __5(type )() Int() { return d.__4()().Add()(d.__1()()) };


/* Later example */

type Eq(type a Eq(a)) interface {
	Equal(type )(that a) Bool()
};


/* Example code */

type Any(type ) interface {};
type Function(type a Any(), b Any()) interface {
	Apply(type )(x a) b
};
type incr(type ) struct { n Int() };
func (this incr(type )) Apply(type )(x Int()) Int() {
	return x.Add()(this.n)
};
type pos(type ) struct {};  // We already have IsNeg, though
func (this pos(type )) Apply(type )(x Int()) Bool() {
	return x.Gt()(Zero(){})
};

type compose(type a Any(), b Any(), c Any()) struct {
	f Function(a, b);
	g Function(b, c)
};
func (this compose(type a Any(), b Any(), c Any())) 
			Apply(type )(x a) c {
	return this.g.Apply()(this.f.Apply()(x))
};


func main() {
	/*var f Function(int, bool) =
				compose(int, int, bool){incr{-5}, pos{}}
	var b bool = f.Apply(3)*/
	fmt.Printf("%#v", compose(Int(), Int(), Bool()){incr(){Ints(){}.__5()()} , pos(){}}.  
			Apply()(Ints(){}._3()()))
}
