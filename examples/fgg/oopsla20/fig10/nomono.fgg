//$ go run github.com/rhu1/fgg -fgg -monomc=tmp/fg/oopsla20/fig10/nomono.go -v fgg/examples/oopsla20/fig10/nomono.fgg
//$ go run github.com/rhu1/fgg -eval=-1 -v tmp/fg/oopsla20/fig10/nomono.go

package main;

import "fmt";


/* Library: Bool, Int */

type Bool(type ) interface {
	Not(type )() Bool();
	Equal(type )(that Bool()) Bool();
	Cond(type a Any())(br Branches(a)) a
};
type Branches(type a Any()) interface {
	IfTT(type )() a;
	IfFF(type )() a
};
type TT(type ) struct {};
type FF(type ) struct {};
func (this TT(type )) Not(type )() Bool() { return FF(){} };
func (this FF(type )) Not(type )() Bool() { return TT(){} };
func (this TT(type )) Equal(type )(that Bool()) Bool() { return that };
func (this FF(type )) Equal(type )(that Bool()) Bool() { return that.Not()() };
func (this TT(type )) Cond(type a Any())(br Branches(a)) a { return br.IfTT()() };
func (this FF(type )) Cond(type a Any())(br Branches(a)) a { return br.IfFF()() };

type Int(type ) interface {
	Inc(type )() Int();
	Dec(type )() Int();
	Equal(type )(x Int()) Bool();
	EqualZero(type )() Bool();
	EqualNonZero(type )(x Int()) Bool();
	Add(type )(x Int()) Int();
	Gt(type )(x Int()) Bool();
	IsNeg(type )() Bool()
};

type Zero(type ) struct {};
func (x0 Zero(type )) Inc(type )() Int() { return Pos(){x0} };
func (x0 Zero(type )) Dec(type )() Int() { return Neg(){x0} };
func (x0 Zero(type )) Equal(type )(x Int()) Bool() { return x.EqualZero()() };
func (x0 Zero(type )) EqualZero(type )() Bool() { return TT(){} };
func (x0 Zero(type )) EqualNonZero(type )(x Int()) Bool() { return FF(){} };
func (x0 Zero(type )) Add(type )(x Int()) Int() { return x };
func (x0 Zero(type )) Gt(type )(x Int()) Bool() { return x.IsNeg()() };
func (x0 Zero(type )) IsNeg(type )() Bool() { return FF(){} };

type Pos(type ) struct { dec Int() };
func (x0 Pos(type )) Inc(type )() Int() { return Pos(){x0} };
func (x0 Pos(type )) Dec(type )() Int() { return x0.dec };
func (x0 Pos(type )) Equal(type )(x Int()) Bool() { return x0.EqualNonZero()(x) };
func (x0 Pos(type )) EqualZero(type )() Bool() { return FF(){} };
func (x0 Pos(type )) EqualNonZero(type )(x Int()) Bool() { return x.Equal()(x0.dec) };
func (x0 Pos(type )) Add(type )(x Int()) Int() { return x0.dec.Add()(x.Inc()()) };
func (x0 Pos(type )) Gt(type )(x Int()) Bool() { return x0.dec.Gt()(x.Dec()()) };
func (x0 Pos(type )) IsNeg(type )() Bool() { return FF(){} };

type Neg(type ) struct { inc Int() };
func (x0 Neg(type )) Inc(type )() Int() { return x0.inc };
func (x0 Neg(type )) Dec(type )() Int() { return Neg(){x0} };
func (x0 Neg(type )) Equal(type )(x Int()) Bool() { return x0.EqualNonZero()(x) };
func (x0 Neg(type )) EqualZero(type )() Bool() { return FF(){} };
func (x0 Neg(type )) EqualNonZero(type )(x Int()) Bool() { return x.Equal()(x0.inc) };
func (x0 Neg(type )) Add(type )(x Int()) Int() { return x0.inc.Add()(x.Dec()()) };
func (x0 Neg(type )) Gt(type )(x Int()) Bool() { return x0.inc.Gt()(x.Inc()()) };
func (x0 Neg(type )) IsNeg(type )() Bool() { return TT(){} };

type Ints(type ) struct {};
func (d Ints(type )) _1(type )() Int() { return Pos(){Zero(){}} };
func (d Ints(type )) _2(type )() Int() { return d._1()().Add()(d._1()()) };
func (d Ints(type )) _3(type )() Int() { return d._2()().Add()(d._1()()) };
func (d Ints(type )) _4(type )() Int() { return d._3()().Add()(d._1()()) };
func (d Ints(type )) _5(type )() Int() { return d._4()().Add()(d._1()()) };
func (d Ints(type )) _6(type )() Int() { return d._5()().Add()(d._1()()) };
func (d Ints(type )) __1(type )() Int() { return Neg(){Zero(){}} };
func (d Ints(type )) __2(type )() Int() { return d.__1()().Add()(d.__1()()) };
func (d Ints(type )) __3(type )() Int() { return d.__2()().Add()(d.__1()()) };
func (d Ints(type )) __4(type )() Int() { return d.__3()().Add()(d.__1()()) };
func (d Ints(type )) __5(type )() Int() { return d.__4()().Add()(d.__1()()) };


/* Example code */

type Any(type ) interface {};

type Box(type a Any()) struct {
	value a
};

type nestBr(type a Any()) struct {
	box Box(a);
	n Int()
};
func (this nestBr(type a Any())) IfTT(type )() Any() { return this.box };
func (this nestBr(type a Any())) IfFF(type )() Any() {
	return Box(Box(a)){this.box}.Nest()(this.n.Add()(Ints(){}.__1()()))  // Cf. below
	//return Box(Any()){this.box}.Nest()(this.n.Add()(Ints(){}._1()()))
};

func (this Box(type a Any())) Nest(type )(n Int()) Any() {
	return n.EqualZero()().Cond(Any())(nestBr(a){this, n})
};


type D(type ) struct { };

func main() {
	fmt.Printf("%#v", Box(D()){D(){}}.Nest()(Ints(){}._3()()))
}

