package main;


/* Library: Bool, Int */

type Any[type] interface {};
type Constraint[type a Constraint[a]] interface {
	Equal[type](x a) Bool[] 
};
type Bool[type] interface { 
    Not[type]() Bool[];
	And[type](a Bool[]) Bool[]; 
	Or[type](a Bool[]) Bool[]; 
    Cond[type a Any[]](br Branches[a]) a
};
type Branches[type a Any[]] interface {
	IfTT[type]() a;
	IfFF[type]() a
};
type TT[type] struct {};
type FF[type] struct {};
func (this TT[type]) Not[type]() Bool[] { return FF[]{} };
func (this FF[type]) Not[type]() Bool[] { return TT[]{} };
func (this TT[type]) Cond[type a Any[]](br Branches[a]) a { return br.IfTT[]() };
func (this FF[type]) Cond[type a Any[]](br Branches[a]) a { return br.IfFF[]() };
func (this TT[type]) And[type](a Bool[]) Bool[] { return a };
func (this FF[type]) And[type](a Bool[]) Bool[] { return FF[]{} };
func (this TT[type]) Or[type](a Bool[]) Bool[] { return TT[]{} };
func (this FF[type]) Or[type](a Bool[]) Bool[] { return a };


//Int
type Int[type] interface {
	Inc[type]() Int[];
	Dec[type]() Int[];
	Add[type](x Int[]) Int[];
	Gt[type](x Int[]) Bool[];
	IsNeg[type]() Bool[];
	IsZero[type]() Bool[];
	Equal[type](x Int[]) Bool[]
	//ZeroValue[type]() Int[];
};
type Zero[type] struct {};
func (x0 Zero[type]) Inc[type]() Int[] { return Pos[]{x0} };
func (x0 Zero[type]) Dec[type]() Int[] { return Neg[]{x0} };
func (x0 Zero[type]) Add[type](x Int[]) Int[] { return x };
func (x0 Zero[type]) Gt[type](x Int[]) Bool[] { return x.IsNeg[]() };
func (x0 Zero[type]) IsNeg[type]() Bool[] { return FF[]{} };
func (x0 Zero[type]) IsZero[type]() Bool[] { return TT[]{} };
func (x0 Zero[type]) Equal[type](x Int[]) Bool[] { return x.IsZero[]() };
//func (x0 Zero[type]) 

type Pos[type] struct { dec Int[] };
func (x0 Pos[type]) Inc[type]() Int[] { return Pos[]{x0} };
func (x0 Pos[type]) Dec[type]() Int[] { return x0.dec };
func (x0 Pos[type]) Add[type](x Int[]) Int[] { return x0.dec.Add[](x.Inc[]()) };
func (x0 Pos[type]) Gt[type](x Int[]) Bool[] { return x0.dec.Gt[](x.Dec[]()) };
func (x0 Pos[type]) IsNeg[type]() Bool[] { return FF[]{} };
func (x0 Pos[type]) IsZero[type]() Bool[] { return FF[]{} };
func (x0 Pos[type]) Equal[type](x Int[]) Bool[] { return x0.dec.Equal[](x.Dec[]()) };

type Neg[type] struct { inc Int[] };
func (x0 Neg[type]) Inc[type]() Int[] { return x0.inc };
func (x0 Neg[type]) Dec[type]() Int[] { return Neg[]{x0} };
func (x0 Neg[type]) Add[type](x Int[]) Int[] { return x0.inc.Add[](x.Dec[]()) };
func (x0 Neg[type]) Gt[type](x Int[]) Bool[] { return x0.inc.Gt[](x.Inc[]()) };
func (x0 Neg[type]) IsNeg[type]() Bool[] { return TT[]{} };
func (x0 Neg[type]) IsZero[type]() Bool[] { return FF[]{} };
func (x0 Neg[type]) Equal[type](x Int[]) Bool[] { return x0.inc.Equal[](x.Inc[]()) };

type Ints[type ] struct {};
func (d Ints[type ]) _1[type ]() Int[] { return Pos[]{Zero[]{}} };
func (d Ints[type ]) _2[type ]() Int[] { return d._1[]().Add[](d._1[]()) };
func (d Ints[type ]) _3[type ]() Int[] { return d._2[]().Add[](d._1[]()) };
func (d Ints[type ]) _4[type ]() Int[] { return d._3[]().Add[](d._1[]()) };
func (d Ints[type ]) _5[type ]() Int[] { return d._4[]().Add[](d._1[]()) };
func (d Ints[type ]) _6[type ]() Int[] { return d._5[]().Add[](d._1[]()) };
func (d Ints[type ]) __1[type ]() Int[] { return Neg[]{Zero[]{}} };
func (d Ints[type ]) __2[type ]() Int[] { return d.__1[]().Add[](d.__1[]()) };
func (d Ints[type ]) __3[type ]() Int[] { return d.__2[]().Add[](d.__1[]()) };
func (d Ints[type ]) __4[type ]() Int[] { return d.__3[]().Add[](d.__1[]()) };
func (d Ints[type ]) __5[type ]() Int[] { return d.__4[]().Add[](d.__1[]()) };

/* Library: ZeroValues */

/*type ZeroValued[type a Any[]] interface {
ZeroValue[type]() a
}*/

type testContext[type] struct {

};

type DoneSignal[type] struct{};
type Unit[type] struct{};

type RangerPair[type Elem Any[]] struct {
sender Sender[Elem];
receiver Receiver[Elem]
};

// Ranger returns a Sender and a Receiver. The Receiver provides a
// Next method to retrieve values. The Sender provides a Send method
// to send values and a Close method to stop sending values. The Next
// method indicates when the Sender has been closed, and the Send
// method indicates when the Receiver has been freed.
//
// This is a convenient way to exit a goroutine sending values when
// the receiver stops reading them.

func (this testContext[type]) Ranger[type Elem Any[]]() RangerPair[Elem] {
	c := make(chan Elem);
	d := make(chan DoneSignal[]);
	s := Sender[Elem]{c, d};
	r := Receiver[Elem] {c, d};
	return RangerPair[Elem]{s, r}
};

// A Sender is used to send values to a Receiver.
type Sender[type Elem Any[]] struct {
	values chan<- Elem;
	done   <-chan DoneSignal[type ]
};

// Send sends a value to the receiver. It reports whether the value was sent.
// The value will not be sent if the context is closed or the receiver
// is freed.

func (s Sender[type Elem Any[]]) Send[type ](v Elem) Bool[] {
	select {
	case s.values <- v:
		return FF[]{}.Not[]()
	case tmp := <-s.done:
		return TT[]{}.Not[]()
	}
};

// Close tells the receiver that no more values will arrive.
// After Close is called, the Sender may no longer be used.
func (s Sender[type Elem Any[]]) Close[type ]() Unit[] {
	close(s.values);
	return Unit[]{}
};

// A Receiver receives values from a Sender.
type Receiver[type Elem Any[]] struct {
	values <-chan Elem;
	done   chan<- DoneSignal[type ]
};

// Next returns the next value from the channel. The bool result indicates
// whether the value is valid.
func (r Receiver[type Elem Any[]]) Next[type ]() Elem {
	select {
	case v := <-r.values:
		return v
	}
};

// finalize is a finalizer for the receiver.
func (r Receiver[type Elem Any[]]) finalize[type ]() Unit[] {
	close(r.done);
	return Unit[]{}
};

func (this testContext[type ]) TestRanger_go1[type ](r Receiver[Int[]]) Unit[] {
	v := r.Next[]();
	s := v.Equal[](Ints[]{}._1[]()).(TT[]);
	return Unit[]{}
};

func (this testContext[type ]) TestRanger_go2[type ](s Sender[Int[]], c1 chan Bool[], c2 chan Bool[]) Unit[] {
	s1 := s.Send[](Ints[]{}._1[]()).(TT[]);
	close(c1);
	s2 := s.Send[](Ints[]{}._2[]()).(FF[]);
	close(c2);
	return Unit[]{}
};

func (this testContext[type ]) Panic[type ](x Any[]) Unit[] {
	return x.(Unit[])
};

func (this testContext[type ]) TestRanger[type ]() Unit[] {
	rangerPair := this.Ranger[Int[]]();
	s := rangerPair.sender;
	r := rangerPair.receiver;
	
	go this.TestRanger_go1[](r);

	c1 := make(chan Bool[]);
	c2 := make(chan Bool[]);
	go this.TestRanger_go2[](s, c1, c2);
	s3 := <-c1;

	// Force a garbage collection to try to get the finalizers to run.
	s4 := r.finalize[]();

	select {
	case s5 := <-c2:
		return Unit[]{}
	default:
		return Unit[]{}//this.Panic[](this)//manual panic
	}
};

func main() {
	_ = testContext[]{}.TestRanger[]()
}