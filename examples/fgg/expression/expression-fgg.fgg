//$ go run github.com/rhu1/fgg -fgg -v -eval=-1 fgg/examples/expression/expression-fgg.fgg
//$ go run github.com/rhu1/fgg -fgg -v -monomc=tmp/monom/scratch/scratch.go fgg/examples/expression/expression-fgg.fgg

// A solution to the Expression Problem in generalised FGG.

// 1. Define Eval() on Con and Plus
// 2. Define String() on Con and Plus
// 3. Define Eval() on Neg.
// 4. Define String() on Neg.
// Each of 1, 2, 3, 4 should be doable without
// altering the answers to the others.

// We require a generalised version of FGG,
// where function receivers may put stronger
// bounds on type variables.
// Modify rule t-func in FGG, to replace
//   (\type~t_S(\Phi)~T) \in \ov{D}
// by
//   (\type~t_S(\Psi)~T) \in \ov{D}
//   \and
//   (\type~\ov{\alpha~\rho_I)) = \Phi
//   \and
//   (\type~\ov{\alpha~\tau_I)) = \Psi
//   \and
//   \ov{\rho_I \imp \tau_I}

package main;

// TODO
type Int(type ) interface { isInt(type )() Int(); String(type )() string };
type One(type ) struct {};
func (x0 One(type )) isInt(type )() Int() { return x0 };
func (x0 One(type )) String(type )() string { return fmt.Sprintf("%v", x0) };


// 1

type Evalable(type ) interface {
  Eval(type )() Int()
};

type Con(type ) struct {
  value Int()
};

func (e Con(type )) Eval(type )() Int() {
  return e.value
};

type Any(type ) interface {};

type Add(type a Any()) struct {
  left a;
  right a
};

func (e Add(type a Evalable())) Eval(type )() Int() {
//func (e Add(type )) Eval(type )() Int() {  // TODO: add test
  return e.left.Eval()() //+ e.right.Eval()()
};

/*
func main() {
  //Evalable e = Add(Evalable){Con{1}, Con{2}}
  _ = Add(Evalable){Con(){1}, Con(){2}}.Eval()()
}*/

// 2

type Stringable(type ) interface {
  String(type )() string
};

func (e Con(type )) String(type )() string {
  return fmt.Sprintf("%d", e.value)
};

func (e Add(type a Stringable())) String(type )() string {
  return fmt.Sprintf("(%d+%d)", e.left.String()(), e.right.String()())
};

/*
func main() {
  //Stringable e = Add(Evalable()){Con{1}, Con{2}}
  _ = Add(Evalable()){Con(){1}, Con(){2}}.String()()
}*/

// 3

type Neg(type a Any()) struct {
  expr a
};

func (e Neg(type a Evalable())) Eval(type )() Int() {
  return One(){}//- e.expr.Eval()
};

// 4

func (e Neg(type a Stringable())) String(type )() string {
  return fmt.Sprintf("-%d", e.expr.String()())
};

// 5

type Expr(type ) interface {
  //Evalable;  // TODO: WF
  Evalable();
  Stringable()
};


func main() {
  //Expr e = Add(Expr()){Con{1}, Neg(Expr()){Con{2}}}
  //int v = e.Eval()
  _ = Add(Expr()){Con(){One(){}}, Neg(Expr()){Con(){One(){}}}}.Eval()().String()()
}

