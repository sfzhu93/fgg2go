
package main;

import "fmt";

//#############
//# Simplified Int and Bool 
//# Based on library functions from https://github.com/rhu1/fgg/fg/examples/oopsla20/fig1/functions.go
//#############

type Any(type ) interface {}
type Top(type ) struct {}; // Haskell ()

type Function(type dom Any(), codom Any()) interface {
	Apply(x dom) codom
}

type Bool(type ) interface {
	Not(type )() Bool;
	Cond(type a Any())(br Branches(a)) a
};
type Branches(type a Any()) interface {
	IfTT(type )() a;
	IfFF(type )() a
};
type TT(type ) struct{};
func (this TT(type )) Not(type )() Bool { return FF(){} };
func (this TT(type )) Cond(type a Any())(br Branches(a)) a { return br.IfTT()() };

type FF struct{};
func (this FF(type )) Not(type )() Bool { return TT(){} };
func (this FF(type )) Cond(type a Any())(br Branches(a)) a { return br.IfFF()() };


type Int interface {
	Inc(type )() Int();
	Dec(type )() Int();
	Add(type )(x Int()) Int();
	Gt(type )(x Int()) Bool();
	IsNeg(type )() Bool()
	HasFactor(type )(x Int()) Bool();
	IsZero(type )() Bool()
};

type Ints(type ) struct { val int }
func (this Ints(type )) Inc(type )() Int() {return Ints(){this.val + 1}}
func (this Ints(type )) Dec(type )() Int() {return Ints(){this.val - 1}}
func (this Ints(type )) Add(type )(that Int()) Int() {
	return Ints(){this.val + that.(Ints()).val}
}
func (this Ints(type )) Gt(type )(that Int()) Bool() {
	if this.val > that.(Ints).val {
		return TT(){}
	} else {
		return FF(){}
	}
}
func (this Ints(type )) IsNeg(type )() Bool() {return Ints(){0}.Gt()(this)}

func (this Ints(type )) HasFactor(type )(that Int()) Bool() {
	if this.val % that.(Ints).val == 0{
		return TT(){}
	} else {
		return FF(){}
	}
}
func (this Ints(type )) IsZero(type )() Bool() {
	if this.val == 0 {
		return TT(){}
	} else {
		return FF(){}
	}
}

//#############
//# Prime Sieve
//#############


// func Generate(ch chan<- int) {
// 	for i := 2; ; i++ { ch <- i } // Send sequence 2,3...
// }
// func Filter(in <-chan int, out chan<- int, prime int){
// 	for { 
// 		i := <-in // Receive value from ’in’.
// 		if i%prime != 0 { out <- i } // Fwd ’i’ if factor.
// 	}
// }
// func main() {
// 	ch := make(chan int) // Create new channel.
// 	go Generate(ch) // Spawn generator.
// 	for i := 0; ; i++ {
// 		prime := <-ch
// 		ch1 := make(chan int)
// 		go Filter(ch, ch1, prime) // Chain filter.
// 		ch = ch1
// 	}
// }

// This code is split up into 3 parts. 

// Generate :  which produces an infinate stream of 
//		sequential integers upon the given channel

type Generate(type ) struct {
	ch chan Int() 
}
func (this Generate(type )) Apply(type )(n Int()) Any() {
	this.ch <- n ; 
	return this.Apply()(n.Inc()) 
}

// Filter : which given an
//		+ Input channel
// 		+ Output channel
//		+ Prime
//		will pass all values from the input channel
//		to the output channel while filtering out 
//		those which have the given prime as a factor

type Predicate(type a Any()) interface {
	SatisfiedBy(type )(val a) Bool()
}
type isFactor(type ) struct{
	factor Int()
}
func (this isFactor(type )) SatisfiedBy(type )(val Int()) Bool() {
	return val.HasFactor()(this.factor)
}

type Filter(type a Any()) struct {
	in chan a ; 
	out chan a ; 
	p Predicate(a) 
}
func (this Filter(type a Any())) Go(type )() Any() {
	i := <-this.in
	return this.p.SatisfiedBy()(i)
				 .Cond(Any())(FilterBranch(a){this, i})
}

type FilterBranch(type a Any()) struct {
	filter Filter(a) ;
	i a
};
func (this FilterBranch(type a Any())) IfTT() Any() {
	return this.filter.Go()()
};
func (this FilterBranch(type a Any())) IfFF() Any() {
	this.filter.out <- this.i ;
	return this.filter.Go()()
};

// PrimeSieve : which will read a value of the
//		input channel. This value is a prime,
//		so it creates a new filter for that prime
//		with same input channel and a new output channel. 
//		We then use the new filter output channel for the
//		new input channel for the next prime. 
//		We do this N - 1 times and return the next value 
//		input channel. 
type PrimeSieve(type ) struct {
	nthPrime Int() ;
	c chan Int()
}

func (this PrimeSieve(type )) Rec(type )() Int() {
	return this.nthPrime.IsZero()().Cond(Int())(this)
}
func (this PrimeSieve(type )) IfTT(type )() Int() {
	return <-this.c
}
func (this PrimeSieve(type )) IfFF(type )() Int() {
	prime := <-this.c ; 
	_c := make(chan Int()) ;
	go Filter(Int()){this.c, _c, isFactor(){prime}}.Go()() ;
	return PrimeSieve(){this.nthPrime.Dec()(), _c}.Rec()()
}

// Primes : compose the other components into a nice function

type Primes(type ) struct {};
func (this Primes(type )) getNthPrime(type )(n Int()) Int() {
	c := make(chan Int()) ; 
	go Generate(){c}.Apply()(Ints(){2}) ; 
	return PrimeSieve(){n.Dec()(), c}.Rec()()
}



func main() {
	fmt.Println()(Primes(){}.getNthPrime()(Ints(){1}))
}


